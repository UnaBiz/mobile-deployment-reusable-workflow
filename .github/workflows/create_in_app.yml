name: Create in-app deployment
on:
  workflow_call:
    secrets:
      EXPO_TOKEN:
        required: true
      PAT:
        required: true
jobs:
  retrieve-env:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve Environment
        id: retrieve-env
        shell: bash
        run: |
          ENV="staging"
          if [[ "${GITHUB_REF#refs/heads/}" == "master" ]]; then
            ENV="production"
          fi
          echo "##[set-output name=env;]$(echo ${ENV})"
    outputs:
      env: ${{ steps.retrieve-env.outputs.env }}
  publish:
    needs: [retrieve-env]
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn

      - name: 🏗 Setup Expo
        uses: expo/expo-github-action@v7
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: 📦 Find yarn cache
        id: yarn-cache-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: 📦 Restore cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: 📦 Install dependencies
        run: |
          echo '@unabiz:registry=https://npm.pkg.github.com' > ${{ github.workspace }}/.npmrc
          echo '//npm.pkg.github.com/:_authToken=${{ secrets.PAT }}' >> ${{ github.workspace }}/.npmrc
          yarn eas-build-pre-install
      
      - name: 🚀 Publish preview
        env:
          ENV: ${{ needs.retrieve-env.outputs.env }}
        run:
          CHANNEL=$(cat eas.json | jq ".build.production.channel")
          eas update --channel $CHANNEL --message "Updating... Adding the new features."